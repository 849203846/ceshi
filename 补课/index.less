* {
  margin: 0;
  padding: 0;
}

.flexBox {
  //旧版本 的box
  display: box;
  display: -webkit-box;
  display: -moz-box;

  //过度版本flexbox
  display: -ms-flexbox;

  //新版本 flex
  display: flex;
  display: -webkit-flex;
}

.flex(@flex) {
  -webkit-box-flex: @flex;
  -moz-box-flex: @flex;
  -ms-flex: @flex;
  -webkit-flex: @flex;
  flex: @flex;
}
.vertical{

  -webkit-box-orient: vertical;
  box-orient:vertical;

  -webkit-flex-direction:column;
  flex-direction:column;

}

section{
  .flexBox;
  .left{
    .flex(1);
    height: 500px;
    background: lightblue;
  }
  .right{
    .flexBox;
    .flex(2);
   .vertical; //垂直居中  不加没有短度
    background: greenyellow;
    .top{
      height: 250px;
      background: rebeccapurple;
    }
    .bot{
      .flexBox;
      height: 250px;
      background: palevioletred;
      .botLeft{
       .flex(2);
        background: white;

      }
      .botRight{
        .flex(3);
        background: lightslategrey;
      }
    }
  }
}



nav {
  // 把a标签的默认像素去掉 1.font-size: 0;
  //                      2.html的换行符

  //清除浮动
  //clear: both;
  //overflow: hidden;
  //加一个伪元素clear: both;

  //display: block;
  //content: counter(,disc);
  //font-size: 0;

  //p标签段落缩进;
  //ifc
  //bfc
  //行内元素的渲染模式

  overflow: hidden;

  a {
    background: lightgreen;
    text-decoration: none;
    float: left;
    width: 20%;
    height: 40px;
    line-height: 40px;
    text-align: center;
    font-size: 20px;
    border-right: 2px solid red;
    box-sizing: border-box; //怪异盒子模型 把内边距和边框算在宽度里面
    color: black;
    margin-bottom: 20px;
  }
}

.box {
  .flexBox;
  li {
    .flex(1); //平分占得比重 每一个li都占一份  每个li平分
    height: 40px;
    line-height: 40px;
    background: #00a5ff;
    text-align: center;
  }
}

li {
  list-style: none;
}


//弹性盒模型的扩展比
.flexUl{
  .flexBox;
  width: 600px;
  li{
    width: 100px;
  &:nth-child(1){
    height: 40px;
    background: red;
  }
    &:nth-child(2){
      width: 50px;
      flex-grow: 1;
      height: 40px;
      background: burlywood;
    }
    &:nth-child(3){
      flex-grow: 3;
      height: 40px;
      background: darkmagenta;
    }
  }
}
//扩展比是划分父元素剩下的宽度
//扩展比 让拥有flex-grow属性的元素去瓜分剩下的宽度
//total li(1) li(2) li(3)
//600  100      50     50   =400
//     没有    1       3
//     100    100     300
//     100px  150px  350px
//第一个li没有扩展宽度 所以400px分成4份 把多余的宽度瓜分



.shrink{
  width: 600px;
  .flexBox;
  li{
    width: 600px;
  &:nth-child(1){
    background: red;
}
  &:nth-child(2){
    flex-shrink: 2;
    background: blue;
  }
  &:nth-child(3){
    flex-shrink: 3;
    background: orange;
  }  }
}
//flex-shrink: 1;缩放比
//没加缩放比默认是1

//total li(1) li(2) li(3)
//600     300    400    500   =1200

//li(1) 600*(1/6)=100
//li(1) 600*(2/6)=200
//li(1) 600*(3/6)=300
